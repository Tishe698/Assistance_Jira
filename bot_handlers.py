# ==============================================
# –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î TELEGRAM –ë–û–¢–ê
# ==============================================
# –≠—Ç–æ—Ç —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ –±–æ—Ç–∞
# –ö–∞–∂–¥–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

from telebot import types
from get_desk_api import url, get_column_count_task, get_desk_api
from config import DEBUG_MODE
from datetime import datetime
import time  # –î–æ–±–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç time

def setup_handlers(bot):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –≤—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –±–æ—Ç–∞
    –í—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–∑ main.py
    """
    
    # ============== –ö–û–ú–ê–ù–î–ê /START ==============
    @bot.message_handler(commands=['start'])
    def start_message(message):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–Ω–æ–ø–∫–∏ —Å –¥–æ—Å—Ç—É–ø–Ω—ã–º–∏ –¥–æ—Å–∫–∞–º–∏
        """
        if DEBUG_MODE:
            print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.chat.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏
        markup = types.InlineKeyboardMarkup()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –¥–æ—Å–∫–∏ –∏–∑ –∫–æ–Ω—Ñ–∏–≥–∞ API
        for board_name in url.keys():
            board_button = types.InlineKeyboardButton(
                text=board_name,  # –¢–µ–∫—Å—Ç –Ω–∞ –∫–Ω–æ–ø–∫–µ
                callback_data=board_name  # –î–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è
            )
            markup.add(board_button)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏
        bot.send_message(
            message.chat.id,
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ—Å–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:",
            reply_markup=markup
        )

    # ============== –ù–ê–ñ–ê–¢–ò–ï –ù–ê –î–û–°–ö–£ ==============
    @bot.callback_query_handler(func=lambda call: call.data in url.keys())
    def handle_board_selection(call):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –¥–æ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, ARM_QA)
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ–ª–æ–Ω–∫–∏ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∑–∞–¥–∞—á –≤ –∫–∞–∂–¥–æ–π
        """
        if DEBUG_MODE:
            print(f"üìã –í—ã–±—Ä–∞–Ω–∞ –¥–æ—Å–∫–∞: {call.data}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å API
            response = get_desk_api()
            if response.status_code != 200:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å —Å–µ—Ä–≤–µ—Ä–∞"
                )
                return
            
            response_data = response.json()
            markup = types.InlineKeyboardMarkup()
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–ª–æ–Ω–∫–∏
            for column_data in response_data['columnsData']['columns']:
                column_name = column_data['name']
                task_count = int(column_data['statisticsFieldValue'])
                
                # –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏: "–ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ X –∑–∞–¥–∞—á(–∞)"
                button_text = f"{column_name} ({task_count} –∑–∞–¥–∞—á)"
                
                column_button = types.InlineKeyboardButton(
                    text=button_text,
                    callback_data=f"column_{column_name}"
                )
                markup.add(column_button)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="üìÇ –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á:",
                reply_markup=markup
            )
            
        except Exception as e:
            if DEBUG_MODE:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–ª–æ–Ω–æ–∫: {e}")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö"
            )

    # ============== –ù–ê–ñ–ê–¢–ò–ï –ù–ê –ö–û–õ–û–ù–ö–£ ==============
    @bot.callback_query_handler(func=lambda call: call.data.startswith("column_"))
    def handle_column_selection(call):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –∫–æ–ª–æ–Ω–∫–∏
        –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–¥–∞—á –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
        """
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–∫–∏
        column_name = call.data.replace("column_", "")
        
        if DEBUG_MODE:
            print(f"üìÇ –í—ã–±—Ä–∞–Ω–∞ –∫–æ–ª–æ–Ω–∫–∞: {column_name}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–æ–ª–æ–Ω–∫–∏
            tasks_text = get_column_count_task(selected_column=column_name)
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
            markup = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–ª–æ–Ω–∫–∞–º",
                callback_data="back_to_columns"
            )
            markup.add(back_button)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=tasks_text,
                reply_markup=markup
            )
            
        except Exception as e:
            if DEBUG_MODE:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á: {e}")
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–¥–∞—á"
            )

    # ============== –ü–ï–†–ï–•–û–î –í JIRA –ò–ó –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ==============
    @bot.callback_query_handler(func=lambda call: call.data.startswith("task_"))
    def handle_task_view(call):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–ª–∏–∫ –ø–æ –∑–∞–¥–∞—á–µ:
        - –ò–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: –ù–ï –ò–°–ü–û–õ–¨–ó–£–ï–¢–°–Ø (—É–±—Ä–∞–ª–∏ –∫–Ω–æ–ø–∫–∏ –∑–∞–¥–∞—á)
        - –ò–∑ –∫–æ–ª–æ–Ω–æ–∫: –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–µ—Ç–∞–ª–∏
        """
        # –≠—Ç–æ –æ–±—ã—á–Ω–∞—è –∑–∞–¥–∞—á–∞ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∫–∞–∫ —Ä–∞–Ω—å—à–µ
        task_key = call.data.replace("task_", "")
        
        if DEBUG_MODE:
            print(f"üîç –ü—Ä–æ—Å–º–æ—Ç—Ä –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏: {task_key}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –∏–∑ API
            task_details = get_task_details_from_api(task_key)
            
            if task_details:
                details_text = f"üîπ {task_details['key']} ‚Äî {task_details['summary']}\n\n"
                details_text += f"üë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: {task_details.get('assignee', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω')}\n"
                
                # –ï—Å–ª–∏ –µ—Å—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –µ–≥–æ
                if task_details.get('description'):
                    desc = task_details['description'][:500]
                    if len(task_details['description']) > 500:
                        desc += "..."
                    details_text += f"\nüìù –û–ø–∏—Å–∞–Ω–∏–µ:\n{desc}"
            else:
                details_text = f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ {task_key}"
            
            # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –∫–æ–ª–æ–Ω–∫–∞–º
            markup = types.InlineKeyboardMarkup()
            back_button = types.InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –∫–æ–ª–æ–Ω–∫–∞–º", 
                callback_data="back_to_columns"
            )
            markup.add(back_button)
            
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=details_text,
                reply_markup=markup
            )
            
        except Exception as e:
            if DEBUG_MODE:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∑–∞–¥–∞—á–∏: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞—á–∏")

    # ============== –í–û–ó–í–†–ê–¢ –ö –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Æ ==============
    @bot.callback_query_handler(func=lambda call: call.data.startswith("back_to_reminder_"))
    def handle_back_to_reminder(call):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º
        """
        reminder_id = call.data.replace("back_to_reminder_", "")
        
        if DEBUG_MODE:
            print(f"‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é {reminder_id}")
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ monitor.py
            try:
                from monitor import active_reminders, reminder_readers, find_monitored_column
            except ImportError as e:
                if DEBUG_MODE:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ monitor.py: {e}")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
            if reminder_id not in active_reminders or not active_reminders[reminder_id]['active']:
                bot.answer_callback_query(call.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á
            response = get_desk_api()
            if not response or response.status_code != 200:
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö")
                return
            
            current_data = response.json()
            target_column = find_monitored_column(current_data)
            
            if not target_column:
                bot.answer_callback_query(call.id, "‚ùå –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –µ—â—ë –≤ –∫–æ–ª–æ–Ω–∫–µ
            still_waiting_tasks = []
            status_ids = target_column['statusIds']
            
            for issue in current_data['issuesData']['issues']:
                if (issue['statusId'] in status_ids and 
                    issue['key'] in active_reminders[reminder_id]['task_keys']):
                    still_waiting_tasks.append({
                        'key': issue['key'],
                        'summary': issue['summary']
                    })
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∑–∞–Ω–æ–≤–æ
            elapsed_minutes = int((time.time() - active_reminders[reminder_id]['start_time']) / 60)
            
            message = f"‚ö†Ô∏è –í–æ–∑—å–º–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É!\n\n"
            message += f"–ó–∞–¥–∞—á–∏ –æ–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ {elapsed_minutes} –º–∏–Ω—É—Ç:\n"
            
            for task in still_waiting_tasks:
                message += f"üìã {task['key']} - {task['summary']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—á–∏—Ç–∞–≤—à–∏—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
            if reminder_id in reminder_readers and reminder_readers[reminder_id]:
                readers_list = ", ".join(reminder_readers[reminder_id])
                message += f"\n‚úÖ –ü—Ä–æ—á–∏—Ç–∞–ª–∏: {readers_list}"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏
            markup = types.InlineKeyboardMarkup()
            
            for task in still_waiting_tasks:
                task_text = task['summary'][:40] + "..." if len(task['summary']) > 40 else task['summary']
                task_button = types.InlineKeyboardButton(
                    text=f"üìã {task['key']} - {task_text}",
                    callback_data=f"task_{task['key']}_from_reminder_{reminder_id}"
                )
                markup.add(task_button)
            
            # –ö–Ω–æ–ø–∫–∏ "–ü—Ä–æ—á–∏—Ç–∞–Ω–æ" –∏ "–£–¥–∞–ª–∏—Ç—å"
            read_button = types.InlineKeyboardButton(
                text="‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–æ",
                callback_data=f"read_{reminder_id}"
            )
            delete_button = types.InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_{reminder_id}"
            )
            markup.add(read_button, delete_button)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message,
                reply_markup=markup
            )
            
        except Exception as e:
            if DEBUG_MODE:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞")

    # ============== –ö–ù–û–ü–ö–ê "–ù–ê–ó–ê–î" ==============
    @bot.callback_query_handler(func=lambda call: call.data == "back_to_columns")
    def handle_back_button(call):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –∫–æ–ª–æ–Ω–∫–∞–º"
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–æ–Ω–æ–∫
        """
        if DEBUG_MODE:
            print("‚¨ÖÔ∏è –í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –∫–æ–ª–æ–Ω–æ–∫")
        
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–∫–∞–∑–∞ –∫–æ–ª–æ–Ω–æ–∫
        handle_board_selection(call)

    # ============== –ö–ù–û–ü–ö–ê "–í–ó–Ø–õ –ó–ê–î–ê–ß–£" ==============
    @bot.callback_query_handler(func=lambda call: call.data.startswith("take_"))
    def handle_take_task(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–í–∑—è–ª [–Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏]' –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏"""
        # –ü–∞—Ä—Å–∏–º: take_UGC-8006_reminder_abc123
        callback_parts = call.data.replace("take_", "").split("_reminder_")
        task_key = callback_parts[0]
        reminder_id = callback_parts[1]
        
        if DEBUG_MODE:
            print(f"üíº –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è–ª –∑–∞–¥–∞—á—É {task_key} –∏–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_name = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            current_time = datetime.now().strftime("%H:%M")
            
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ monitor.py
            try:
                from monitor import active_reminders, reminder_readers, find_monitored_column, stop_reminder
            except ImportError as e:
                if DEBUG_MODE:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ monitor.py: {e}")
                bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–æ
            if reminder_id not in active_reminders or not active_reminders[reminder_id]['active']:
                bot.answer_callback_query(call.id, "‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –∞–∫—Ç–∏–≤–Ω–æ")
                return
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤–∑—è—Ç—ã—Ö –∑–∞–¥–∞—á
            if reminder_id not in reminder_readers:
                reminder_readers[reminder_id] = {}
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –≤–∑—è–ª –ª–∏ –∫—Ç–æ-—Ç–æ —É–∂–µ —ç—Ç—É –∑–∞–¥–∞—á—É
            if task_key in reminder_readers[reminder_id]:
                existing_taker = reminder_readers[reminder_id][task_key]
                bot.answer_callback_query(call.id, f"‚ö†Ô∏è –ó–∞–¥–∞—á—É —É–∂–µ –≤–∑—è–ª {existing_taker}")
                return
            
            # –û—Ç–º–µ—á–∞–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∑—è–ª —ç—Ç—É –∑–∞–¥–∞—á—É
            reminder_readers[reminder_id][task_key] = f"{user_name} ({current_time})"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∑–∞–¥–∞—á—É –≤ Jira –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
            jira_url = f"https://jira.zxz.su/browse/{task_key}"
            bot.send_message(
                call.message.chat.id,
                f"üîó **{task_key}** - –æ—Ç–∫—Ä—ã—Ç—å –≤ Jira:\n{jira_url}",
                parse_mode='Markdown',
                disable_web_page_preview=False
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            bot.answer_callback_query(call.id, f"üíº –í–∑—è–ª–∏ –∑–∞–¥–∞—á—É {task_key}!")
            
            # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
            response = get_desk_api()
            if not response or response.status_code != 200:
                if DEBUG_MODE:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}")
                return
            
            current_data = response.json()
            target_column = find_monitored_column(current_data)
            
            if not target_column:
                if DEBUG_MODE:
                    print(f"‚ùå –ö–æ–ª–æ–Ω–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}")
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –µ—â—ë –≤ –∫–æ–ª–æ–Ω–∫–µ
            still_waiting_tasks = []
            status_ids = target_column['statusIds']
            
            for issue in current_data['issuesData']['issues']:
                if (issue['statusId'] in status_ids and 
                    issue['key'] in active_reminders[reminder_id]['task_keys']):
                    still_waiting_tasks.append({
                        'key': issue['key'],
                        'summary': issue['summary']
                    })
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –ª–∏ –∑–∞–¥–∞—á–∏ –≤–∑—è—Ç—ã
            all_tasks_taken = all(
                task['key'] in reminder_readers[reminder_id] 
                for task in still_waiting_tasks
            )
            
            if all_tasks_taken:
                # –í—Å–µ –∑–∞–¥–∞—á–∏ –≤–∑—è—Ç—ã - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                stop_reminder(reminder_id)
                if DEBUG_MODE:
                    print(f"üõë –í—Å–µ –∑–∞–¥–∞—á–∏ –≤–∑—è—Ç—ã - –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            elapsed_minutes = int((time.time() - active_reminders[reminder_id]['start_time']) / 60)
            
            message = f"‚ö†Ô∏è –í–æ–∑—å–º–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É!\n\n"
            message += f"–ó–∞–¥–∞—á–∏ –æ–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ {elapsed_minutes} –º–∏–Ω—É—Ç:\n"
            
            for task in still_waiting_tasks:
                message += f"üìã {task['key']} - {task['summary']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑—è—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            if reminder_readers[reminder_id]:
                message += f"\nüíº –í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É:\n"
                for taken_task, taker in reminder_readers[reminder_id].items():
                    message += f"- {taken_task}: {taker}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ù–ï –≤–∑—è—Ç—ã—Ö –∑–∞–¥–∞—á
            markup = types.InlineKeyboardMarkup()
            
            for task in still_waiting_tasks:
                if task['key'] not in reminder_readers[reminder_id]:
                    # –ó–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –≤–∑—è—Ç–∞ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É
                    task_text = task['summary'][:20] + "..." if len(task['summary']) > 20 else task['summary']
                    take_button = types.InlineKeyboardButton(
                        text=f"üíº –í–∑—è—Ç—å {task['key']}",
                        callback_data=f"take_{task['key']}_reminder_{reminder_id}"
                    )
                    markup.add(take_button)
            
            # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å" –æ—Å—Ç–∞–µ—Ç—Å—è –≤—Å–µ–≥–¥–∞
            delete_button = types.InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_{reminder_id}"
            )
            markup.add(delete_button)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            bot.edit_message_text(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id,
                text=message,
                reply_markup=markup
            )
            
            if DEBUG_MODE:
                print(f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ - {user_name} –≤–∑—è–ª {task_key}")
                
        except Exception as e:
            if DEBUG_MODE:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∑—è—Ç–∏—è –∑–∞–¥–∞—á–∏ {task_key}: {e}")
            bot.answer_callback_query(call.id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")

    # ============== –ö–ù–û–ü–ö–ê "–£–î–ê–õ–ò–¢–¨ –£–í–ï–î–û–ú–õ–ï–ù–ò–ï" ==============
    @bot.callback_query_handler(func=lambda call: call.data.startswith("delete_"))
    def handle_delete_reminder(call):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ '–£–¥–∞–ª–∏—Ç—å' –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏"""
        reminder_id = call.data.replace("delete_", "")
        
        if DEBUG_MODE:
            print(f"üóëÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª '–£–¥–∞–ª–∏—Ç—å' –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        bot.answer_callback_query(call.id, "üóëÔ∏è –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ!")
        
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –∏–∑ monitor.py
            try:
                from monitor import stop_reminder, active_reminders
            except ImportError as e:
                if DEBUG_MODE:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∏–∑ monitor.py: {e}")
                return
            
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            stop_reminder(reminder_id)
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            user_name = call.from_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
            
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é
            bot.delete_message(
                chat_id=call.message.chat.id,
                message_id=call.message.message_id
            )
            
            if DEBUG_MODE:
                print(f"üóëÔ∏è –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} —É–¥–∞–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}")
                
        except Exception as e:
            if DEBUG_MODE:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")
            # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
            try:
                bot.edit_message_text(
                    chat_id=call.message.chat.id,
                    message_id=call.message.message_id,
                    text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
                )
            except:
                pass

    # ============== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø ==============
    def get_task_details_from_api(task_key):
        """
        –ü–æ–ª—É—á–∞–µ—Ç –¥–µ—Ç–∞–ª–∏ –∑–∞–¥–∞—á–∏ –∏–∑ API Jira
        
        Args:
            task_key: –∫–ª—é—á –∑–∞–¥–∞—á–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä UGC-7913)
            
        Returns:
            dict: –¥–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
        """
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ API
            response = get_desk_api()
            if response and response.status_code == 200:
                api_data = response.json()
                
                # –ò—â–µ–º –∑–∞–¥–∞—á—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∑–∞–¥–∞—á
                for issue in api_data['issuesData']['issues']:
                    if issue['key'] == task_key:
                        return {
                            'key': issue['key'],
                            'summary': issue['summary'],
                            'assignee': issue.get('assigneeName', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'),
                            'description': issue.get('description', '–û–ø–∏—Å–∞–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç')
                        }
            
            return None
            
        except Exception as e:
            if DEBUG_MODE:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏ {task_key}: {e}")
            return None

    if DEBUG_MODE:
        print("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")