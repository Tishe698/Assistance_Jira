# ==============================================
# –°–ò–°–¢–ï–ú–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê –ó–ê–î–ê–ß JIRA
# ==============================================
# –≠—Ç–æ—Ç —Ñ–∞–π–ª –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –∫–æ–ª–æ–Ω–∫–µ Jira
# –∏ –æ—Ç–ø—Ä–∞–≤–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —á–∞—Ç

import time
import threading
from telebot import types
from get_desk_api import get_desk_api
from config import (
    WORK_CHAT_ID, 
    CHECK_INTERVAL, 
    MONITORED_COLUMN, 
    NOTIFICATION_TEMPLATE,
    DEBUG_MODE,
    SHOW_CHECK_STATUS,
    REMINDER_INTERVAL 
)

# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
last_column_state = {}
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
active_reminders = {}
# –ì–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫—Ç–æ –ø—Ä–æ—á–∏—Ç–∞–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
reminder_readers = {}

def start_monitoring(bot):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∏—Å—Ç–µ–º—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    
    Args:
        bot: –æ–±—ä–µ–∫—Ç Telegram –±–æ—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    """
    
    def monitor_loop():
        """
        –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ –∫–∞–∂–¥—ã–µ CHECK_INTERVAL —Å–µ–∫—É–Ω–¥
        """
        global last_column_state
        
        if DEBUG_MODE:
            print(f"üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ–ª–æ–Ω–∫–∏ '{MONITORED_COLUMN}' –∑–∞–ø—É—â–µ–Ω")
            print(f"‚è±Ô∏è –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {CHECK_INTERVAL} —Å–µ–∫—É–Ω–¥")
        
        while True:
            try:
                if SHOW_CHECK_STATUS:
                    print(f"‚è∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤ {time.strftime('%H:%M:%S')}")
                
                # –ü–æ–ª—É—á–∞–µ–º —Å–≤–µ–∂–∏–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Jira API
                response = get_desk_api()
                
                if response and response.status_code == 200:
                    current_data = response.json()
                    
                    # –ò—â–µ–º –Ω—É–∂–Ω—É—é –∫–æ–ª–æ–Ω–∫—É —Å—Ä–µ–¥–∏ –≤—Å–µ—Ö –∫–æ–ª–æ–Ω–æ–∫
                    target_column = find_monitored_column(current_data)
                    
                    if target_column:
                        process_column_data(target_column, bot, current_data)
                    else:
                        if DEBUG_MODE:
                            print(f"‚ö†Ô∏è –ö–æ–ª–æ–Ω–∫–∞ '{MONITORED_COLUMN}' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                else:
                    if DEBUG_MODE:
                        print(f"‚ùå –û—à–∏–±–∫–∞ API: —Å—Ç–∞—Ç—É—Å {response.status_code if response else '–Ω–µ—Ç –æ—Ç–≤–µ—Ç–∞'}")
                        
            except Exception as e:
                if DEBUG_MODE:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
            
            # –ñ–¥–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            time.sleep(CHECK_INTERVAL)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    monitor_thread = threading.Thread(target=monitor_loop, daemon=True)
    monitor_thread.start()
    
    if DEBUG_MODE:
        print("‚úÖ –ü–æ—Ç–æ–∫ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–ø—É—â–µ–Ω")

def find_monitored_column(api_data):
    """
    –ù–∞—Ö–æ–¥–∏—Ç –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—É—é –∫–æ–ª–æ–Ω–∫—É –≤ –¥–∞–Ω–Ω—ã—Ö API
    
    Args:
        api_data: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Jira API
        
    Returns:
        dict: –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    for column in api_data['columnsData']['columns']:
        if column['name'] == MONITORED_COLUMN:
            return column
    return None

def process_column_data(column_data, bot, full_api_data):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
    
    Args:
        column_data: –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ API
        bot: –æ–±—ä–µ–∫—Ç Telegram –±–æ—Ç–∞
        full_api_data: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
    """
    global last_column_state
    
    current_count = int(column_data['statisticsFieldValue'])
    
    if SHOW_CHECK_STATUS:
        print(f"üìä –ó–∞–¥–∞—á –≤ –∫–æ–ª–æ–Ω–∫–µ '{MONITORED_COLUMN}': {current_count}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if MONITORED_COLUMN in last_column_state:
        old_count = last_column_state[MONITORED_COLUMN]
        
        if SHOW_CHECK_STATUS:
            print(f"üìà –ë—ã–ª–æ –∑–∞–¥–∞—á: {old_count}")
        
        # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á —É–≤–µ–ª–∏—á–∏–ª–æ—Å—å - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if current_count > old_count:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö
            new_tasks = get_new_tasks_data(column_data, full_api_data)
            send_notification(bot, old_count, current_count, new_tasks)
            
    else:
        if DEBUG_MODE:
            print("üÜï –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ - —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –±–∞–∑–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    last_column_state[MONITORED_COLUMN] = current_count

def get_new_tasks_data(column_data, full_api_data):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º–æ–π –∫–æ–ª–æ–Ω–∫–∏
    
    Args:
        column_data: –¥–∞–Ω–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
        full_api_data: –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ API
        
    Returns:
        list: —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á —Å –∏—Ö –¥–∞–Ω–Ω—ã–º–∏
    """
    tasks = []
    status_ids = column_data['statusIds']
    
    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –∑–∞–¥–∞—á–∞–º –∏ –Ω–∞—Ö–æ–¥–∏–º —Ç–µ —á—Ç–æ –≤ –Ω—É–∂–Ω–æ–π –∫–æ–ª–æ–Ω–∫–µ
    for issue in full_api_data['issuesData']['issues']:
        if issue['statusId'] in status_ids:
            tasks.append({
                'key': issue['key'],
                'summary': issue['summary'],
                'assignee': issue.get('assigneeName', '–Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω'),
                'status_id': issue['statusId']
            })
    
    return tasks

def send_notification(bot, old_count, new_count, new_tasks_data=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    
    Args:
        bot: –æ–±—ä–µ–∫—Ç Telegram –±–æ—Ç–∞
        old_count: –ø—Ä–µ–¥—ã–¥—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        new_count: —Ç–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–¥–∞—á
        new_tasks_data: –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–¥–∞—á–∞—Ö
    """
    difference = new_count - old_count
    timestamp = time.strftime('%H:%M:%S %d.%m.%Y')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞
    message = NOTIFICATION_TEMPLATE.format(
        difference=difference,
        total_count=new_count,
        timestamp=timestamp
    )
    
    if DEBUG_MODE:
        print(f"üö® –ù–û–í–´–ï –ó–ê–î–ê–ß–ò! –û—Ç–ø—Ä–∞–≤–ª—è—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ...")
        print(f"üìß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: +{difference} –∑–∞–¥–∞—á(–∏) (–≤—Å–µ–≥–æ: {new_count})")
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–∞–¥–∞—á
    markup = types.InlineKeyboardMarkup()
    
    if new_tasks_data:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏ (–º–∞–∫—Å–∏–º—É–º 5)
        recent_tasks = new_tasks_data[-difference:] if difference <= len(new_tasks_data) else new_tasks_data[:5]
        
        for task in recent_tasks:
            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
            task_text = task['summary'][:40] + "..." if len(task['summary']) > 40 else task['summary']
            
            task_button = types.InlineKeyboardButton(
                text=f"üìã {task['key']} - {task_text}",
                callback_data=f"task_{task['key']}"
            )
            markup.add(task_button)
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ —Ä–∞–±–æ—á–∏–π —á–∞—Ç
        bot.send_message(WORK_CHAT_ID, message, reply_markup=markup if new_tasks_data else None)
         # –ó–∞–ø—É—Å–∫–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á
        if new_tasks_data:
            start_reminder_for_tasks(bot, [task['key'] for task in recent_tasks])
        if DEBUG_MODE:
            print("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
            
    except Exception as e:
        if DEBUG_MODE:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

def get_monitoring_status():
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    
    Returns:
        dict: –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
    """
    return {
        'monitored_column': MONITORED_COLUMN,
        'check_interval': CHECK_INTERVAL,
        'last_known_count': last_column_state.get(MONITORED_COLUMN, 0),
        'is_active': True
    }

def start_reminder_for_tasks(bot, task_keys):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è —Å–ø–∏—Å–∫–∞ –∑–∞–¥–∞—á"""
    global active_reminders, reminder_readers
    
    import time
    import uuid
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
    reminder_id = str(uuid.uuid4())[:8]
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–∏
    active_reminders[reminder_id] = {
        'task_keys': task_keys,
        'start_time': time.time(),
        'active': True
    }
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≤–∑—è–≤—à–∏—Ö –∑–∞–¥–∞—á–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (—Å–ª–æ–≤–∞—Ä—å: –∑–∞–¥–∞—á–∞ -> –∫—Ç–æ –≤–∑—è–ª)
    reminder_readers[reminder_id] = {}
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    def reminder_timer():
        time.sleep(REMINDER_INTERVAL)
        if reminder_id in active_reminders and active_reminders[reminder_id]['active']:
            send_reminder(bot, reminder_id)
    
    reminder_thread = threading.Thread(target=reminder_timer, daemon=True)
    reminder_thread.start()
    
    if DEBUG_MODE:
        print(f"‚è∞ –ó–∞–ø—É—â–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –¥–ª—è {len(task_keys)} –∑–∞–¥–∞—á(–∏)")

def send_reminder(bot, reminder_id):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–∞—Ö"""
    global active_reminders, reminder_readers
    
    if reminder_id not in active_reminders or not active_reminders[reminder_id]['active']:
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        response = get_desk_api()
        if not response or response.status_code != 200:
            return
        
        current_data = response.json()
        
        # –ù–∞—Ö–æ–¥–∏–º –∫–æ–ª–æ–Ω–∫—É "–û–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
        target_column = find_monitored_column(current_data)
        if not target_column:
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –µ—â—ë –≤ –∫–æ–ª–æ–Ω–∫–µ
        still_waiting_tasks = []
        status_ids = target_column['statusIds']
        
        for issue in current_data['issuesData']['issues']:
            if (issue['statusId'] in status_ids and 
                issue['key'] in active_reminders[reminder_id]['task_keys']):
                still_waiting_tasks.append({
                    'key': issue['key'],
                    'summary': issue['summary']
                })
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏ –∫–æ—Ç–æ—Ä—ã–µ –≤—Å—ë –µ—â—ë –∂–¥—É—Ç
        if still_waiting_tasks:
            elapsed_minutes = int((time.time() - active_reminders[reminder_id]['start_time']) / 60)
            
            message = f"‚ö†Ô∏è –í–æ–∑—å–º–∏—Ç–µ –∑–∞–¥–∞—á—É –≤ —Ä–∞–±–æ—Ç—É!\n\n"
            message += f"–ó–∞–¥–∞—á–∏ –æ–∂–∏–¥–∞—é—Ç —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–∂–µ {elapsed_minutes} –º–∏–Ω—É—Ç:\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –≤ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
            for task in still_waiting_tasks:
                message += f"üìã {task['key']} - {task['summary']}\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∑—è—Ç—ã—Ö –∑–∞–¥–∞—á–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
            if reminder_id in reminder_readers and reminder_readers[reminder_id]:
                message += f"\nüíº –í–∑—è–ª–∏ –≤ —Ä–∞–±–æ—Ç—É:\n"
                for task_key, taker in reminder_readers[reminder_id].items():
                    message += f"- {task_key}: {taker}\n"
            
            # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∑–∞–¥–∞—á–∏ –æ—Ç–¥–µ–ª—å–Ω–æ
            markup = types.InlineKeyboardMarkup()
            
            for task in still_waiting_tasks:
                task_text = task['summary'][:20] + "..." if len(task['summary']) > 20 else task['summary']
                take_button = types.InlineKeyboardButton(
                    text=f"üíº –í–∑—è—Ç—å {task['key']}",
                    callback_data=f"take_{task['key']}_reminder_{reminder_id}"
                )
                markup.add(take_button)
            
            # –ö–Ω–æ–ø–∫–∞ "–£–¥–∞–ª–∏—Ç—å"
            delete_button = types.InlineKeyboardButton(
                text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_{reminder_id}"
            )
            markup.add(delete_button)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            bot.send_message(WORK_CHAT_ID, message, reply_markup=markup)
            
            if DEBUG_MODE:
                print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –¥–ª—è {len(still_waiting_tasks)} –∑–∞–¥–∞—á(–∏)")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π —Ç–∞–π–º–µ—Ä
            def next_reminder():
                time.sleep(REMINDER_INTERVAL)
                if reminder_id in active_reminders and active_reminders[reminder_id]['active']:
                    send_reminder(bot, reminder_id)
            
            reminder_thread = threading.Thread(target=next_reminder, daemon=True)
            reminder_thread.start()
        else:
            # –í—Å–µ –∑–∞–¥–∞—á–∏ —É—à–ª–∏ –∏–∑ –∫–æ–ª–æ–Ω–∫–∏ - –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            active_reminders[reminder_id]['active'] = False
            if DEBUG_MODE:
                print(f"üõë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ - –≤—Å–µ –∑–∞–¥–∞—á–∏ –≤–∑—è—Ç—ã –≤ —Ä–∞–±–æ—Ç—É")
                
    except Exception as e:
        if DEBUG_MODE:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {reminder_id}: {e}")

def add_reader_to_reminder(reminder_id, user_name, user_time):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—á–∏—Ç–∞–≤—à–∏—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    global reminder_readers
    
    if reminder_id not in reminder_readers:
        reminder_readers[reminder_id] = []
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω
    reader_entry = f"{user_name} ({user_time})"
    if reader_entry not in reminder_readers[reminder_id]:
        reminder_readers[reminder_id].append(reader_entry)
        if DEBUG_MODE:
            print(f"üìñ –î–æ–±–∞–≤–ª–µ–Ω —á–∏—Ç–∞—Ç–µ–ª—å {reader_entry} –∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—é {reminder_id}")

def stop_reminder(reminder_id):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ"""
    global active_reminders
    
    if reminder_id in active_reminders:
        active_reminders[reminder_id]['active'] = False
        if DEBUG_MODE:
            print(f"üõë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {reminder_id} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")